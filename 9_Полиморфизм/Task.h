#pragma once
/*
Во входном потоке («stdin») дано произвольное количество описаний
геометрических фигур. Каждая фигура задаётся одной строкой, первая буква
определяет тип, далее через пробел — параметры:

| Маркер | Фигура        | Параметры | Пояснение                                                               |
| ------ | ------------- | --------- | ----------------------------------------------------------------------- |
| `R`    | прямоугольник | `w h`     | ширина `w` и высота `h`, оба числа > 0                                  |
| `C`    | круг          | `r`       | радиус `r`, число > 0                                                   |
| `T`    | треугольник   | `a b c`   | стороны `a`, `b`, `c`, все > 0 и удовлетворяют неравенству треугольника |



Требуется:
Построить иерархию классов
Shape              (абстрактный базовый класс)
 ├─ Rect           (прямоугольник)
 ├─ Circ           (круг)
 └─ Tri            (треугольник)

В базовом классе объявите чисто-виртуальную функцию
virtual double area() const = 0;

При чтении каждой строки создать объект соответствующего класса и поместить его во std::vector<std::unique_ptr<Shape>>.
После достижения EOF вычислить суммарную площадь всех фигур и вывести её на стандартный вывод в формате.


Каждая строка: <тип> <параметры> (см. таблицу).
Числа — как целые, так и вещественные (дробная часть отделяется точкой).
Допустимо наличие лишних пробелов или табуляций между токенами.
Гарантируется, что строка содержит не более 256 символов.

Примеры входных данных
R 5 4
C 3
T 3 4 5
C   1.5
*/


int main() {}